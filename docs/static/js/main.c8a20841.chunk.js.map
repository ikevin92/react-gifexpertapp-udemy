{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","console","log","GifGrid","loading","state","setState","useEffect","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,cCJDQ,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEbC,mBAAS,IAFI,mBAE1CC,EAF0C,KAE9BC,EAF8B,KAyBjD,OACC,sBAAMC,SAfc,SAACC,GAErBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE9BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OAExCN,EAAc,MAOf,SACC,uBACCO,KAAK,OACLC,MAAOT,EACPU,SA1BuB,SAACP,GAG1BF,EAAcE,EAAEQ,OAAOF,a,QCRZG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAGxC,OACC,sBAAKC,UAAU,0CAAf,UACC,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,mBAAGE,UAAU,+CAAb,SACEF,Q,uBCTQK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAChBN,EADgB,0FACyEO,UAC9FF,GAFqB,sBAKHG,MAAMR,GALH,cAKhBS,EALgB,gBAMCA,EAAKC,OANN,uBAMdC,EANc,EAMdA,KAIFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC9B,MAAO,CACNhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAIpCiB,QAAQC,IAAIN,GAlBU,kBAmBfA,GAnBe,4CAAH,sDCMPO,EAAU,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACfrB,mBAAS,CAClC2B,KAAM,GACNS,SAAS,IAH+B,mBAClCC,EADkC,KAC3BC,EAD2B,KAgBzC,OAVAC,qBAAU,WAETnB,EAAQC,GAAU7B,MAAK,SAACgD,GACvBF,EAAS,CACRX,KAAMa,EACNJ,SAAS,SAGT,CAACf,IAEGgB,EDV2BI,CAAapB,GAAjCU,EAJ0B,EAIhCJ,KAAcS,EAJkB,EAIlBA,QAKtB,OACC,qCACC,oBAAInB,UAAU,mCAAd,SAAkDI,IAEjDe,GACA,mBAAGnB,UAAU,oCAAb,qBAGD,qBAAKA,UAAU,gDAAf,SACEc,EAAOF,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,aErBd4B,EAAe,WAAM,MAEG1C,mBAAS,CAAC,cAFb,mBAE1B2C,EAF0B,KAEd5C,EAFc,KAIjC,OACC,qCACC,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BACE4C,EAAWd,KAAI,SAACR,GAAD,OACf,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCXnBuB,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,SAK1D1D,M","file":"static/js/main.c8a20841.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\t//hook\n\tconst [inputValue, setInputValue] = useState('');\n\n\tconst handleInputChange = (e) => {\n\t\t// console.log(e.target.value);\n\t\t// actualizamos el state del hook de arriba\n\t\tsetInputValue(e.target.value);\n\t};\n\n\t//evento del enter\n\tconst handelSubmit = (e) => {\n\t\t//evitamos que actualice la ventana\n\t\te.preventDefault();\n\n\t\tif (inputValue.trim().length > 2) {\n\t\t\t//agrega la categoria\n\t\t\tsetCategories((cats) => [inputValue, ...cats]);\n\t\t\t//limpiamos el string\n\t\t\tsetInputValue('');\n\t\t}\n\n\t\t//console.log('Submit');\n\t};\n\n\treturn (\n\t\t<form onSubmit={handelSubmit}>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tvalue={inputValue}\n\t\t\t\tonChange={handleInputChange}\n\t\t\t/>\n\t\t</form>\n\t);\n};\n\n// obligatorio el prop\nAddCategory.propTypes = {\n\tsetCategories: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nexport const GifGridItem = ({ id, title, url }) => {\n\t// console.log({ id, title, url });\n\n\treturn (\n\t\t<div className=\"card animate__animated animate__flipInY\">\n\t\t\t<img src={url} alt={title} />\n\t\t\t<p className=\"animate__animated animate__rotateInDownRight\">\n\t\t\t\t{title}\n\t\t\t</p>\n\t\t</div>\n\t);\n};\n","export const getGifs = async (category) => {\n\tconst url = `https://api.giphy.com/v1/gifs/search?api_key=0QZfY1mqaNCIcjdYFsRgbnbnBIomDoIr&q=${encodeURI(\n\t\tcategory\n\t)}&limit=10`;\n\n\tconst resp = await fetch(url);\n\tconst { data } = await resp.json();\n\n\t// console.log(data);\n\n\tconst gifs = data.map((img) => {\n\t\treturn {\n\t\t\tid: img.id,\n\t\t\ttitle: img.title,\n\t\t\turl: img.images?.downsized_medium.url,\n\t\t};\n\t});\n\n\tconsole.log(gifs);\n\treturn gifs;\n\n\t//0QZfY1mqaNCIcjdYFsRgbnbnBIomDoIr\n};\n","// import React, { useState, useEffect } from 'react';\nimport React from 'react';\nimport { GifGridItem } from './GifGridItem';\n// import { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({ category }) => {\n\t//hook\n\n\t//Custom Hook\n\tconst { data: images, loading } = useFetchGifs(category);\n\n\t// console.log(images);\n\t// // hacemos que solo se ejecute una vez la carga\n\n\treturn (\n\t\t<>\n\t\t\t<h3 className=\"animate__animated animate__jello\">{category}</h3>\n\n\t\t\t{loading && (\n\t\t\t\t<p className=\"animate__animated animate__fadeIn\">Loading</p>\n\t\t\t)}\n\n\t\t\t<div className=\"card-grid animate__animated animate__fadeInUp\">\n\t\t\t\t{images.map((img) => (\n\t\t\t\t\t<GifGridItem key={img.id} {...img} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n","// creamos un hook personalizado (CUSTOM HOOK)\nimport { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\tconst [state, setState] = useState({\n\t\tdata: [],\n\t\tloading: true,\n\t});\n\n\tuseEffect(() => {\n\t\t// llamamos del helpers\n\t\tgetGifs(category).then((imgs) => {\n\t\t\tsetState({\n\t\t\t\tdata: imgs,\n\t\t\t\tloading: false,\n\t\t\t});\n\t\t});\n\t}, [category]); // si la categoria cambia realiza de nuevo el useEffect\n\n\treturn state; //  {data: [],loading: true}\n};\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\t//hook\n\tconst [categories, setCategories] = useState(['One Punch']);\n\n\treturn (\n\t\t<>\n\t\t\t<h1>GifExpertApp</h1>\n\t\t\t<AddCategory setCategories={setCategories} />\n\t\t\t<hr />\n\n\t\t\t{/* <button onClick={handleAdd}>Agregar</button> */}\n\n\t\t\t<ol>\n\t\t\t\t{categories.map((category) => (\n\t\t\t\t\t<GifGrid key={category} category={category} />\n\t\t\t\t))}\n\t\t\t</ol>\n\t\t</>\n\t);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}